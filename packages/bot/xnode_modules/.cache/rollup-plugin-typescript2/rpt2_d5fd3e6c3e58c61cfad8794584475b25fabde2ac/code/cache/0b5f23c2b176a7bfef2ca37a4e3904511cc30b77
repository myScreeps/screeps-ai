{"code":"import { sleep, createProcess } from 'oscore';\r\nimport { restartOnTickChange } from '../utils';\r\nimport { createLogger, } from '../library';\r\n// const getRoom = (roomName: string): Room => {\r\n//     const room = Game.rooms[roomName];\r\n//     if (room === undefined) {\r\n//       return exit(`Room ${roomName} not found`);\r\n//     }\r\n//     return room;\r\n//   };\r\nconst logger = createLogger('room-manager');\r\nconsole.log(\"27 Game.time \" + Game.time);\r\nconst findContainerWithEnergy = (worker) => {\r\n    let container;\r\n    let containers = worker.pos.findInRange(FIND_STRUCTURES, 5, {\r\n        filter: s => (s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0)\r\n    });\r\n    if (containers.length > 0) {\r\n        container = containers[0];\r\n        return container;\r\n    }\r\n    return undefined;\r\n};\r\nconst rooms = Game.rooms;\r\nexport const roomManager = createProcess(restartOnTickChange(function* () {\r\n    var _a, _b, _c;\r\n    for (;;) {\r\n        for (let roomName in rooms) {\r\n            console.log(\"Game.time is \" + Game.time);\r\n            let room = Game.rooms[roomName];\r\n            const safeModeStatus = (_a = room === null || room === void 0 ? void 0 : room.controller) === null || _a === void 0 ? void 0 : _a.safeMode;\r\n            if (room == undefined) {\r\n                continue;\r\n            }\r\n            let controllerLevel = (_b = room === null || room === void 0 ? void 0 : room.controller) === null || _b === void 0 ? void 0 : _b.level;\r\n            const source1Link = room.getSource1Link();\r\n            const source2Link = room.getSource2Link();\r\n            const controllerLink = room.getControllerLink(undefined);\r\n            const source1Container = room.getSource1Container();\r\n            const source2Container = room.getSource1Container();\r\n            const firstSpawn = room.getFirstSpawn();\r\n            // const source2Container1 = Game.getObjectById (\"62f2e4a57349b1bc0ab9956a\" as any) as any;\r\n            // const source2Container2 = Game.getObjectById (\"62fc7ce8da37d44cdfcde5ee\" as any) as any;\r\n            if (room.name == \"E44S3\") {\r\n                const tower1Id = \"62f446749fb8831de0634625\";\r\n                const tower2Id = \"62fdff99b38ef00b1a9f03b6\";\r\n                // let tower1 = Game.getObjectById(tower1Id) as StructureTower;\r\n                let tower2 = Game.getObjectById(tower2Id);\r\n                //Game.structures[]\r\n                // if (tower1.needsEnergy == undefined) {\r\n                //     tower1.needsEnergy = false;\r\n                // }\r\n                //     if (tower1.store.getFreeCapacity(RESOURCE_ENERGY) >= 200) {\r\n                //         tower1.needsEnergy = true;\r\n                //     }\r\n                //     if (tower1.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n                //         tower1.needsEnergy = false;\r\n                //     }\r\n                //      console.log(\"94 tower1.needsEnergy is \" + tower1.needsEnergy)\r\n                //     console.log(\"94 tower1.needsEnergy is \" + room.spawns)\r\n                const Source2_Container_E44S3 = Game.flags.Source2_Container_E44S3;\r\n                // if (source2Container1.store.getUsedCapacity(RESOURCE_ENERGY) >= source2Container2.store.getUsedCapacity(RESOURCE_ENERGY)) {\r\n                //    Source2_Container_E44S3?.setPosition(source2Container1);\r\n                // }\r\n                // else{\r\n                //     Source2_Container_E44S3?.setPosition(source2Container2);\r\n                // }\r\n                firstSpawn.renewCreepsNextToSpawn(1450);\r\n                //////////////////////////////////////////////////////////////////////////////////\r\n                // if all three links exist, transfer energy from source2 link to controller link\r\n                if ((controllerLink && source1Link && source2Link) && controllerLink.store.getFreeCapacity(RESOURCE_ENERGY) >= 200) {\r\n                    if (source2Link.store.getUsedCapacity(RESOURCE_ENERGY) >= 200) {\r\n                        if (controllerLink.store.getFreeCapacity(RESOURCE_ENERGY) >= 200) {\r\n                            source2Link.transferEnergy(controllerLink);\r\n                        }\r\n                    }\r\n                    else if (source2Link.store.getUsedCapacity(RESOURCE_ENERGY) >= 200) {\r\n                        if (source1Link.store.getFreeCapacity(RESOURCE_ENERGY) >= 200) {\r\n                            source2Link.transferEnergy(source1Link);\r\n                        }\r\n                    }\r\n                }\r\n                //////////////////////////////////////////////////////////////////////////////////\r\n                // if only Source 1 and source2 links exist, tranfer energy from source2 link-> source 1 link\r\n                else if (source1Link && source2Link) {\r\n                    // console.log(\"source1Link is \" + source1Link + \" source2Link is \" + source2Link)\r\n                    if (source2Link.store.getUsedCapacity(RESOURCE_ENERGY) >= 200) {\r\n                        if (source1Link.store.getFreeCapacity(RESOURCE_ENERGY) >= 200) {\r\n                            source2Link.transferEnergy(source1Link);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (room != undefined) {\r\n                //   const spawns = room.find(FIND_MY_SPAWNS);\r\n                let towers = _.filter(Game.structures, s => s.structureType == STRUCTURE_TOWER && s.room.name == room.name);\r\n                let invaders = room.find(FIND_HOSTILE_CREEPS);\r\n                let maxRampartHits = room.getFirstSpawn().memory.maxRampartHits;\r\n                let maxWallHits = room.getFirstSpawn().memory.maxWallHits;\r\n                const firstSpawn = room.getFirstSpawn();\r\n                const ramparts = room.getRamparts(maxRampartHits);\r\n                console.log(\"160 ramparts.length is \" + (ramparts === null || ramparts === void 0 ? void 0 : ramparts.length));\r\n                if (ramparts.length == 0 && ((_c = room.storage) === null || _c === void 0 ? void 0 : _c.store.getUsedCapacity(RESOURCE_ENERGY)) >= 998000) {\r\n                    maxRampartHits += 10000;\r\n                    firstSpawn.memory.maxRampartHits = maxRampartHits;\r\n                    // return maxRampartHits;\r\n                }\r\n                // console.log(\"158 maxRampartHits is \" + maxRampartHits);\r\n                // console.log(\"159 maxWallHits is \" + maxWallHits);\r\n                let damagedCreeps = room.find(FIND_MY_CREEPS, { filter: s => s.hits < s.hitsMax });\r\n                let repairStructures = room.find(FIND_STRUCTURES, { filter: s => s.hits < s.hitsMax\r\n                        && s.structureType == STRUCTURE_ROAD\r\n                        || s.structureType == STRUCTURE_CONTAINER });\r\n                ////////////////////////////////////////////\r\n                // Priority 1: attack invaders\r\n                if (invaders.length > 0 && safeModeStatus == undefined) {\r\n                    for (const tower of towers) {\r\n                        ////////////////////////////////////////////\r\n                        // Priority attack invader that can heal\r\n                        let evilCreepWithHeal = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS, { filter: (s) => s.getActiveBodyparts(ATTACK) && s.getActiveBodyparts(HEAL) && s.owner.username == \"invader\" });\r\n                        if (evilCreepWithHeal) {\r\n                            tower.attack(evilCreepWithHeal);\r\n                            console.log(\"**** Invader in room ****\");\r\n                        }\r\n                        // else attack\r\n                        else {\r\n                            let invader = invaders[0];\r\n                            if (invader) {\r\n                                tower.attack(invader);\r\n                                console.log(\"**** Invader in room ****\");\r\n                            }\r\n                        }\r\n                    }\r\n                    yield* sleep();\r\n                }\r\n                ////////////////////////////////////////////\\\r\n                // Priority 2: heal creeps\r\n                if ((invaders.length == 0 && damagedCreeps.length > 0)) {\r\n                    for (const tower of towers) {\r\n                        var damagedCreep = tower.pos.findClosestByRange(FIND_MY_CREEPS, { filter: s => s.hits < s.hitsMax });\r\n                        if (damagedCreep != undefined) {\r\n                            tower.heal(damagedCreep);\r\n                        }\r\n                        //   console.log(\"**** Invader in room ****\")\r\n                    }\r\n                    yield* sleep();\r\n                }\r\n                ////////////////////////////////////////////\r\n                // Priority 3: repair structures\r\n                if (invaders.length == 0 && repairStructures.length > 0) {\r\n                    for (const tower of towers) {\r\n                        if (tower.store.getUsedCapacity(RESOURCE_ENERGY) <= 400) {\r\n                            continue;\r\n                        }\r\n                        var damagedStucture = tower.pos.findClosestByRange(FIND_STRUCTURES, { filter: s => s.hits < s.hitsMax\r\n                                && (s.structureType == STRUCTURE_ROAD\r\n                                    || s.structureType == STRUCTURE_CONTAINER) });\r\n                        ////////////////////////////////////////////////\r\n                        // check for ramparts\r\n                        if (damagedStucture == undefined) {\r\n                            damagedStucture = tower.pos.findClosestByRange(FIND_STRUCTURES, { filter: s => s.hits < maxRampartHits\r\n                                    && (s.structureType == STRUCTURE_RAMPART) });\r\n                        }\r\n                        ////////////////////////////////////////////////\r\n                        // Repair Walls under 100K\r\n                        if (damagedStucture == undefined) {\r\n                            damagedStucture = tower.pos.findClosestByRange(FIND_STRUCTURES, { filter: s => s.hits < maxWallHits\r\n                                    && (s.structureType == STRUCTURE_WALL) });\r\n                        }\r\n                        if (damagedStucture != undefined) {\r\n                            let towerTargetFlag = Game.flags[\"TowerTarget_\" + tower.room.name];\r\n                            towerTargetFlag.setPosition(damagedStucture);\r\n                            tower.repair(damagedStucture);\r\n                        }\r\n                        //   console.log(\"**** Invader in room ****\")\r\n                    }\r\n                    yield* sleep();\r\n                }\r\n                console.log(room.name);\r\n            }\r\n            // if (controllerLevel == 4) {\r\n            //     if (room!.storage == undefined) {\r\n            //         if (Game.flags[\"Storage_\" + room!.name] != undefined) {\r\n            //         }\r\n            //     }\r\n            // }\r\n        }\r\n        yield* sleep(); // required. Do not remove\r\n    }\r\n}));\r\n//# sourceMappingURL=room-manager.js.map","references":["C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/os/src/index.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/bot/src/utils/index.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/bot/src/library/index.ts","C:/Users/Neal/AppData/Local/Yarn/Berry/cache/@types-lodash-npm-3.10.2-77e50b98cf-9.zip/node_modules/@types/lodash/index.d.ts"],"map":"{\"version\":3,\"file\":\"room-manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/processes/room-manager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
