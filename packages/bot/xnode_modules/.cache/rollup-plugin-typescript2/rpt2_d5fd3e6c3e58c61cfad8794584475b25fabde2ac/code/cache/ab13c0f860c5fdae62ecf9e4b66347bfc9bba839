{"code":"import { sleep, createProcess } from 'oscore';\r\nimport { expandPosition } from '../utils';\r\nconst firstSpawn = Game.spawns.Spawn1;\r\n//const workerCount = firstSpawn.memory.workerCount;\r\nconst workerCount = 1;\r\nconst upgraderCount = 1;\r\nconst haulerCount = 2;\r\nconst hauler2Count = 0;\r\nexport const spawnManager = createProcess(function* () {\r\n    const getSpawn = () => {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return Game.spawns['Spawn1'];\r\n    };\r\n    const spawnHauler = () => {\r\n        getSpawn().spawnCreep(\r\n        //   [CARRY, CARRY, CARRY, MOVE, MOVE, MOVE],\r\n        [CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE], \r\n        //  [CARRY, CARRY, CARRY,CARRY,CARRY, MOVE, MOVE, MOVE, MOVE],\r\n        `hauler-${Game.time}`);\r\n    };\r\n    const spawnHauler2 = () => {\r\n        getSpawn().spawnCreep([CARRY, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE, MOVE, MOVE], \r\n        //  [CARRY, CARRY, CARRY,CARRY,CARRY, MOVE, MOVE, MOVE, MOVE],\r\n        `hauler2-${Game.time}`);\r\n    };\r\n    const spawnSource1Miner = (slot) => {\r\n        // getSpawn().spawnCreep([WORK, WORK, CARRY, MOVE], `miner-${Game.time}`, {\r\n        // getSpawn().spawnCreep([WORK, WORK, WORK, WORK, CARRY, CARRY, MOVE, MOVE, MOVE,MOVE], `miner-${Game.time}`, {\r\n        getSpawn().spawnCreep([WORK, WORK, WORK, WORK, WORK, WORK, WORK, CARRY, CARRY, MOVE, MOVE], `minerSource1-${Game.time}`, {\r\n            memory: { slot },\r\n        });\r\n    };\r\n    const spawnSource2Miner = (slot) => {\r\n        // getSpawn().spawnCreep([WORK, WORK, CARRY, MOVE], `miner-${Game.time}`, {\r\n        // getSpawn().spawnCreep([WORK, WORK, WORK, WORK, CARRY, CARRY, MOVE, MOVE, MOVE,MOVE], `miner-${Game.time}`, {\r\n        getSpawn().spawnCreep([WORK, WORK, WORK, WORK, WORK, WORK, CARRY, MOVE, MOVE, MOVE], `minerSource2-${Game.time}`, {\r\n            memory: { slot },\r\n        });\r\n    };\r\n    const spawnUpgrader = () => {\r\n        getSpawn().spawnCreep(\r\n        //  [WORK, CARRY, CARRY, MOVE, MOVE],\r\n        // [WORK, WORK, WORK, WORK, CARRY, CARRY, MOVE, MOVE,MOVE,MOVE,MOVE],\r\n        // [WORK, WORK, WORK, WORK, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE,MOVE,MOVE,MOVE],\r\n        [WORK, WORK, WORK, WORK, WORK, WORK, WORK, WORK, WORK, WORK, CARRY, CARRY, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE], `upgrader-${Game.time}`);\r\n    };\r\n    const spawnWorker = () => {\r\n        getSpawn().spawnCreep(\r\n        //    [WORK, CARRY, CARRY, MOVE, MOVE],\r\n        [WORK, WORK, WORK, WORK, WORK, WORK, CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE], `worker-${Game.time}`);\r\n    };\r\n    const spawnAttacker = () => {\r\n        getSpawn().spawnCreep([MOVE, ATTACK], `attacker-${Game.time}`);\r\n    };\r\n    for (;;) {\r\n        //  console.log(\"1Game.time \" + Game.time);\r\n        const spawn = getSpawn();\r\n        if (spawn.spawning) {\r\n            yield* sleep(spawn.spawning.remainingTime);\r\n        }\r\n        const sources = spawn.room.find(FIND_SOURCES);\r\n        const terrain = spawn.room.getTerrain();\r\n        const goal = spawn.pos;\r\n        const slots = sources\r\n            .map((source) => expandPosition(source.pos)\r\n            .filter(({ x, y }) => !(terrain.get(x, y) & TERRAIN_MASK_WALL))\r\n            .sort((a, b) => {\r\n            const adistx = Math.abs(goal.x - a.x);\r\n            const bdistx = Math.abs(goal.x - b.x);\r\n            const adisty = Math.abs(goal.y - a.y);\r\n            const bdisty = Math.abs(goal.y - b.y);\r\n            return adistx - bdistx + adisty - bdisty;\r\n        })\r\n            .slice(0, 3))\r\n            .flat();\r\n        // console.log (\"slots is \" + slots);\r\n        // console.log(\"2Game.time \" + Game.time);\r\n        const { miner: miners = [], hauler: haulers = [], hauler2: hauler2s = [], upgrader: upgraders = [], worker: workers = [], attacker: attackers = [], } = _.groupBy(Object.values(Game.creeps), (c) => c.name.split('-')[0]);\r\n        const enemies = spawn.room.find(FIND_HOSTILE_CREEPS);\r\n        //console.log(\"miners.length is \" + miners.length);\r\n        //console.log(\"slots.length is \" + slots.length);\r\n        //console.log(\"miners \" + miners);\r\n        // for (const miner in miners) {\r\n        // console.log(\"miners \" + miners);\r\n        //   if (Object.prototype.hasOwnProperty.call(miners, miner)) {\r\n        //     const element = miners[miner];\r\n        //   }\r\n        // }\r\n        // if (attackers.length < enemies.length) {\r\n        //   spawnAttacker();\r\n        // }\r\n        // else if (miners.length === 0) {\r\n        //   const closestSlot = spawn.pos.findClosestByPath(slots);\r\n        //   if (!closestSlot) {\r\n        //     // TODO\r\n        //     // this.logger.error('No source slot', spawn.room);\r\n        //   //   }\r\n        // //   else {\r\n        //     // if ((closestSlot.x != 11 && closestSlot.y != 8) || (closestSlot.x != 45 && closestSlot.y != 5)) {\r\n        //     // }\r\n        //     spawnMiner([closestSlot.x, closestSlot.y,spawn.room.name]);\r\n        //   }\r\n        // }\r\n        if (haulers.length === 0) {\r\n            spawnHauler();\r\n        }\r\n        else if (firstSpawn.memory.spawnSource1Miner == true || firstSpawn.memory.spawnSource2Miner == true) {\r\n            // check if there is a Source1 creep\r\n            if (firstSpawn.memory.spawnSource1Miner == true) {\r\n                firstSpawn.memory.spawnSource1Miner = false;\r\n                spawnSource1Miner([10, 8, spawn.room.name]);\r\n            }\r\n            // check if there is a Source2 creep\r\n            else if (firstSpawn.memory.spawnSource2Miner == true) {\r\n                firstSpawn.memory.spawnSource2Miner = false;\r\n                spawnSource2Miner([45, 6, spawn.room.name]);\r\n            }\r\n        }\r\n        //     else if (miners.length < 1) {\r\n        //       const takenSlots = miners\r\n        //         .map((creep) => creep.memory.slot)\r\n        //         .filter(isDefined);\r\n        //         const freeSlots = slots.filter(\r\n        //         (pos) => !takenSlots.some(([x, y]) => pos.x === x && pos.y === y)\r\n        //       );\r\n        //       const freeSlot = spawn.pos.findClosestByPath(freeSlots);\r\n        //           console.log(\"FreeSlots is \" + freeSlot)\r\n        //       if ( ((freeSlot!.x == 10 && freeSlot!.y == 8)\r\n        //          || (freeSlot!.x == 45 && freeSlot!.y == 6))) {\r\n        //           console.log(\"spawn miner is \");\r\n        //           spawnMiner([freeSlot!.x, freeSlot!.y,spawn.room.name]);\r\n        //       }\r\n        //       //   spawnMiner([freeSlot!.x, freeSlot!.y,spawn.room.name]);\r\n        // }\r\n        else if (haulers.length < haulerCount) {\r\n            spawnHauler();\r\n        }\r\n        else if (hauler2s.length < hauler2Count) {\r\n            spawnHauler2();\r\n        }\r\n        else if ((upgraders.length < upgraderCount && spawn.room.controller) || spawn.memory.spawnUpgrader == true) {\r\n            console.log(\"175 spawning an upgader\");\r\n            spawnUpgrader();\r\n            if (spawn.memory.spawnUpgrader == true) {\r\n                spawn.memory.spawnUpgrader = false;\r\n            }\r\n        }\r\n        else if (workers.length < workerCount) {\r\n            spawnWorker();\r\n        }\r\n        //yield* sleep(10);\r\n        yield* sleep();\r\n    }\r\n});\r\n//# sourceMappingURL=spawn-manager.js.map","references":["C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/os/src/index.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/bot/src/utils/index.ts"],"map":"{\"version\":3,\"file\":\"spawn-manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/processes/spawn-manager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
