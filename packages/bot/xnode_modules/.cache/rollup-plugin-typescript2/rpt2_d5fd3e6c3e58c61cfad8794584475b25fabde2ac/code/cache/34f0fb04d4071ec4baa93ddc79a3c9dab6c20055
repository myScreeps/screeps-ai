{"code":"import { sleep, createProcess } from 'oscore';\r\nimport { isDefined, restartOnTickChange } from '../utils';\r\nimport { createLogger, } from '../library';\r\nconst myLogger = createLogger(\"myLogger\");\r\nconst findContainerWithEnergy = (worker) => {\r\n    let container;\r\n    let containers = worker.pos.findInRange(FIND_STRUCTURES, 5, {\r\n        filter: s => (s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0)\r\n    });\r\n    if (containers.length > 0) {\r\n        container = containers[0];\r\n        return container;\r\n    }\r\n    return undefined;\r\n};\r\n///////////////////////////////////////////\r\n// miner\r\n///////////////////////////////////////////\r\nconst runMiners = () => {\r\n    const miners = Object.values(Game.creeps).filter((creep) => creep.my && creep.name.startsWith('miner'));\r\n    for (const miner of miners) {\r\n        const source2Link = miner.room.getSource2Link();\r\n        const source1Link = miner.room.getSource1Link();\r\n        const spawn = miner.room.getFirstSpawn();\r\n        if (miner.ticksToLive < 50 && miner.name.startsWith(\"minerSource1\") == true && miner.memory.spawnNewMinerTrigger == undefined) {\r\n            miner.memory.spawnNewMinerTrigger = \"triggered\";\r\n            spawn.memory.spawnSource1Miner = true;\r\n        }\r\n        else if (miner.ticksToLive < 70 && miner.name.startsWith(\"minerSource2\") == true && miner.memory.spawnNewMinerTrigger == undefined) {\r\n            miner.memory.spawnNewMinerTrigger = \"triggered\";\r\n            spawn.memory.spawnSource2Miner = true;\r\n        }\r\n        // miner.say(\"m\")\r\n        // console.log(\"miner.pos is \" + miner.pos)\r\n        if (!isDefined(miner.memory.slot)) {\r\n            // miner.suicide();\r\n            continue;\r\n        }\r\n        const targPos = miner.memory.slot;\r\n        const minerPos = new RoomPosition(targPos[0], targPos[1], targPos[2]);\r\n        if (miner.pos.isEqualTo(minerPos) == false) {\r\n            miner.moveTo(minerPos, { visualizePathStyle: { lineStyle: 'dashed' } });\r\n        }\r\n        const [source] = miner.pos.findInRange(FIND_SOURCES, 1);\r\n        if (source === undefined) {\r\n            continue;\r\n        }\r\n        //  console.log(\"(61 source.energy is \" + (source.energy));\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Handler for when source is emperty waiting to be reset with energy\r\n        if (source.energy == 0) {\r\n            //   console.log(\"(63 source.energy is \" + (source.energy));\r\n            const pickupEnergy = () => {\r\n                const energyDrops = miner.room.find(FIND_DROPPED_RESOURCES, {\r\n                    filter: ({ resourceType }) => resourceType === RESOURCE_ENERGY,\r\n                });\r\n                const resource = _.max(energyDrops, 'amount');\r\n                if (!resource) {\r\n                    return;\r\n                }\r\n                miner.pickup(resource);\r\n            };\r\n            if (source1Link != undefined) {\r\n                //   myLogger.info(\"source1Link  is\" );\r\n                if (miner.pos.isNearTo(source1Link) == true) {\r\n                    if (source1Link.store.getUsedCapacity(RESOURCE_ENERGY) >= 50) {\r\n                        if (miner.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                            miner.withdraw(source1Link, RESOURCE_ENERGY);\r\n                        }\r\n                        //    continue;\r\n                    }\r\n                }\r\n            }\r\n            // let container = miner.findContainerInRange(1) as StructureContainer;\r\n            // if (container != undefined) {\r\n            //   if (container.store.getUsedCapacity (RESOURCE_ENERGY) > 0) {\r\n            //     if (miner.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n            //       miner.withdraw(container,RESOURCE_ENERGY);\r\n            //     }\r\n            //   }\r\n            //   if (miner.room.storage !=undefined) {\r\n            //     if (miner.pos.isNearTo(miner.room.storage!)) {\r\n            //       miner.transfer(miner.room.storage!,RESOURCE_ENERGY)\r\n            //     }\r\n            //   }\r\n            // }\r\n            pickupEnergy();\r\n            const source2Link = miner.room.getSource2Link(undefined);\r\n            miner.transfer(source2Link, RESOURCE_ENERGY);\r\n            // continue;\r\n        }\r\n        ////////////////////////////////////////////////////////\r\n        // if miner is near Source1 link, then Withdraw energy\r\n        if (source1Link != undefined) {\r\n            if (miner.pos.isNearTo(source1Link) == true) {\r\n                if (source1Link.store.getUsedCapacity(RESOURCE_ENERGY) >= 50) {\r\n                    console.log(\"withdrawing from source1Link is \" + source1Link);\r\n                    if (miner.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                        miner.withdraw(source1Link, RESOURCE_ENERGY);\r\n                        //  continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ////////////////////////////////////////////////////////////////////////////\r\n        // if miner is near Source2 link, then tranfer all energy to Source2 Link\r\n        if (source2Link != undefined) {\r\n            //     myLogger.info(\"source2Link  is\" );\r\n            if (miner.pos.isNearTo(source2Link) == true && (miner.store.getUsedCapacity(RESOURCE_ENERGY) > 0)) {\r\n                if (source2Link.store.getFreeCapacity(RESOURCE_ENERGY) >= 0) {\r\n                    miner.transfer(source2Link, RESOURCE_ENERGY);\r\n                    //  continue;\r\n                }\r\n            }\r\n        }\r\n        miner.harvest(source);\r\n        // }\r\n        // if (miner.store.getFreeCapacity() >= 17 || miner.store.getFreeCapacity()) {\r\n        //   console.log(\"(********* 88 miner name is \" + miner.name);\r\n        //   continue;\r\n        // }\r\n        // console.log(\"(********* 93 miner name is \" + miner.name);\r\n        const site = miner.pos.findInRange(FIND_CONSTRUCTION_SITES, 1)[0];\r\n        if (site) {\r\n            miner.build(site);\r\n            continue;\r\n        }\r\n        // #HACK. filtering out container ids can be removed once they are empty.\r\n        const container = miner.pos.findClosestByRange(FIND_STRUCTURES, {\r\n            filter: (structure) => structure.structureType === STRUCTURE_CONTAINER && structure.id != \"62fc7dd889db98c32fcadc27\" && structure.id != \"62f6c9888ed83f1b02aadf32\",\r\n        });\r\n        //   console.log(\"(********* 93 miner name is \" + miner.name + container);\r\n        //   let spawn = Game.getObjectById(\"62f211ab992a4c40a9e2a1d7\" as any) as StructureSpawn\r\n        //   console.log(\"(********* 104 miner name is \" + miner.name);\r\n        if (miner.pos.isNearTo(container) && container.id != \"62fc7dd889db98c32fcadc27\" && container.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n            if (container.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                console.log(\"187 transfer to container.id is \" + container.id);\r\n                miner.transfer(container, RESOURCE_ENERGY);\r\n            }\r\n        }\r\n        else if (miner.room.storage\r\n            && container\r\n            && miner.pos.isNearTo(miner.room.storage)) {\r\n            // if (container && miner.pos.isNearTo(miner.room.storage)) {\r\n            //   //console.log (\"miner.transfer(miner.room.storage, RESOURCE_ENERGY)  is \" + Game.time)\r\n            //   miner.transfer(miner.room.storage, RESOURCE_ENERGY);\r\n            // }\r\n            if (miner.room.storage.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                console.log(\"215 miner.transfer(miner.room.storage, RESOURCE_ENERGY)  is \" + Game.time);\r\n                miner.transfer(miner.room.storage, RESOURCE_ENERGY);\r\n            }\r\n            else if (miner.room.terminal && miner.room.terminal.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                miner.transfer(miner.room.terminal, RESOURCE_ENERGY);\r\n            }\r\n            else if (source2Link != undefined)\r\n                if (miner.pos.isNearTo(source2Link) == true) {\r\n                    if (source2Link.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                        // console.log(\"203 transfer to source2Link.id is \" + source2Link!.id)\r\n                        miner.transfer(source2Link, RESOURCE_ENERGY);\r\n                    }\r\n                }\r\n        }\r\n        else {\r\n            if (container && miner.pos.isNearTo(container)) {\r\n                miner.transfer(container, RESOURCE_ENERGY);\r\n                console.log(\"212 transfer to container.id is \" + container.id);\r\n                console.log(\"(********* 128 miner name is \" + miner.name);\r\n            }\r\n            if (source.energy == 0) {\r\n                console.log(\"(63 source.energy is \" + (source.energy));\r\n                const pickupEnergy = () => {\r\n                    const energyDrops = miner.room.find(FIND_DROPPED_RESOURCES, {\r\n                        filter: ({ resourceType }) => resourceType === RESOURCE_ENERGY,\r\n                    });\r\n                    const resource = _.max(energyDrops, 'amount');\r\n                    if (!resource) {\r\n                        return;\r\n                    }\r\n                };\r\n                pickupEnergy();\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n};\r\n///////////////////////////////////////////\r\n// attacker\r\n///////////////////////////////////////////\r\nconst runAttackers = () => {\r\n    const attackers = Object.values(Game.creeps).filter((creep) => creep.my && creep.name.startsWith('attacker'));\r\n    for (const attacker of attackers) {\r\n        const enemy = attacker.pos.findClosestByRange(FIND_HOSTILE_CREEPS);\r\n        if (enemy) {\r\n            attacker.moveTo(enemy, { range: 1 });\r\n            attacker.attack(enemy);\r\n        }\r\n    }\r\n};\r\n///////////////////////////////////////////\r\n// worker\r\n///////////////////////////////////////////\r\nconst runWorkers = () => {\r\n    const workers = Object.values(Game.creeps).filter((creep) => creep.my && creep.name.startsWith('worker'));\r\n    let target;\r\n    for (const worker of workers) {\r\n        const maxRampartsHits = worker.room.getFirstSpawn().memory.maxRampartsHits;\r\n        const maxWallHits = worker.room.getFirstSpawn().memory.maxWallHits;\r\n        // const pos = new RoomPosition (14,6,\"E44S3\")\r\n        // if (worker.pos.isNearTo(pos) == false) {\r\n        //   worker.moveTo(pos);\r\n        //   continue;\r\n        // }\r\n        worker.say(\"w\");\r\n        const room = worker.room;\r\n        let structures = undefined;\r\n        // const E44S3 = Game.rooms[\"E44S3\"]!\r\n        // const E44S3 = Game.rooms.E44S3!\r\n        // worker.moveTo(E44S3.storage!);\r\n        // continue;\r\n        //  let source1 = worker.room.Source1;\r\n        //  let getSource2Link = worker.room.getSource2Link();\r\n        //  console.log (\"137 getSource2Link.id is \" + getSource2Link!.id)\r\n        //////////////////////////////////////////////////\r\n        // Get energy if worker is empty\r\n        //////////////////////////////////////////////////\r\n        if (worker.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            // let container1 = Game.getObjectById(\"62fc7dd889db98c32fcadc27\" as any)as StructureContainer;\r\n            // let container2 = Game.getObjectById(\"62f6c9888ed83f1b02aadf32\" as any)as StructureContainer;\r\n            // if (container1.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {\r\n            //   worker.moveTo(container1)\r\n            //   worker.withdraw(container1,RESOURCE_ENERGY);\r\n            //   continue\r\n            // }\r\n            // if(container2.store.getUsedCapacity(RESOURCE_ENERGY) >0){\r\n            //   worker.moveTo(container2)\r\n            //   worker.withdraw(container2,RESOURCE_ENERGY);\r\n            //   continue\r\n            // }\r\n            if (worker.room.storage != undefined && worker.room.storage.store.getUsedCapacity(RESOURCE_ENERGY) >= 100) {\r\n                if (worker.pos.isNearTo(worker.room.storage) == false) {\r\n                    worker.moveTo(worker.room.storage);\r\n                    continue;\r\n                }\r\n                else {\r\n                    //    if (container1.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {\r\n                    //   worker.withdraw(container1,RESOURCE_ENERGY);\r\n                    // }\r\n                    // else\r\n                    // if(container2.store.getUsedCapacity(RESOURCE_ENERGY) > 0){\r\n                    //     worker.withdraw(container2,RESOURCE_ENERGY);}\r\n                    // else{\r\n                    worker.withdraw(worker.room.storage, RESOURCE_ENERGY);\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        ////////////////////////////////////////////////\r\n        // build structures\r\n        ////////////////////////////////////////////////\r\n        target = worker.pos.findClosestByRange(FIND_MY_CONSTRUCTION_SITES);\r\n        // console.log(\"!xxxxxx\");\r\n        ////////////////////////////////////////////////\r\n        // Priority 3: repair ramparts\r\n        ////////////////////////////////////////////////\r\n        if (target == undefined) {\r\n            target = worker.pos.findClosestByRange(FIND_MY_STRUCTURES, {\r\n                filter: (s) => s.hits < maxRampartsHits && s.structureType && s.structureType == STRUCTURE_RAMPART,\r\n            });\r\n            //  .sort((a, b) => a.hits - b.hits) ;\r\n            // console.log(\"Worker Target is \" + target)\r\n        }\r\n        ////////////////////////////////////////////////\r\n        // repair walls\r\n        ////////////////////////////////////////////////\r\n        if (target == undefined) {\r\n            target = worker.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                filter: (s) => s.hits < maxWallHits && s.structureType && s.structureType == STRUCTURE_WALL,\r\n            });\r\n            //   console.log(\"161 Worker Target is \" + target)\r\n            //  .sort((a, b) => a.hits - b.hits);\r\n        }\r\n        //   console.log(\"175 target is \" + target);\r\n        ////////////////////////////////////////////////\r\n        //repair damage containers and roads\r\n        ////////////////////////////////////////////////\r\n        if (target == undefined) {\r\n            structures = room.find(FIND_STRUCTURES, {\r\n                filter: (s) => s.hits < s.hitsMax && s.structureType !== STRUCTURE_WALL && s.structureType !== STRUCTURE_RAMPART,\r\n            });\r\n            //   .sort((a, b) => a.hits - b.hits);\r\n            if (structures.length > 0) {\r\n                target = structures[0];\r\n            }\r\n            //  console.log(\"Worker Target is \" + target)\r\n        }\r\n        //   console.log(\"worker.room.storage != undefined \" + worker.room.storage != undefined)\r\n        const pickupEnergy = () => {\r\n            const energyDrops = worker.room.find(FIND_DROPPED_RESOURCES, {\r\n                filter: ({ resourceType }) => resourceType === RESOURCE_ENERGY,\r\n            });\r\n            const resource = _.max(energyDrops, 'amount');\r\n            if (!resource) {\r\n                return;\r\n            }\r\n            worker.moveTo(resource);\r\n            worker.pickup(resource);\r\n        };\r\n        //   console.log(\"213 target is \" + target);\r\n        if (target == undefined) {\r\n            let container = findContainerWithEnergy(worker);\r\n            //  console.log(\"216 container is\" + container);\r\n            if (worker.store.getFreeCapacity()) {\r\n                let containers = worker.pos.findInRange(FIND_STRUCTURES, 5, {\r\n                    filter: s => (s.structureType == STRUCTURE_CONTAINER && s.store[RESOURCE_ENERGY] > 0)\r\n                });\r\n                if (containers.length > 0) {\r\n                    //var container: any;\r\n                    let container = containers[0];\r\n                    if (worker.pos.isNearTo(container) == false) {\r\n                        worker.moveTo(container.pos);\r\n                    }\r\n                    else {\r\n                        worker.withdraw(container, RESOURCE_ENERGY);\r\n                    }\r\n                }\r\n                //  console.log(\"1picking up energy is\");\r\n                //  pickupEnergy();\r\n            }\r\n            continue;\r\n        }\r\n        if ((worker.store.getUsedCapacity() && worker.pos.inRangeTo(target, 25)) ||\r\n            !worker.store.getFreeCapacity()) {\r\n            worker.say(\"T\");\r\n            //  console.log(\"Worker Target is \" + target)\r\n            //      let status = worker.moveTo(target, { range: 10 });\r\n            let status = worker.moveTo(target);\r\n            // myLogger.info(\"test\")\r\n            //  console.log(status);\r\n            if (status != 0) {\r\n                // myLogger.info(status.toLocaleString())\r\n                // console.log(status);\r\n            }\r\n            if (target instanceof ConstructionSite) {\r\n                let buildStatus = worker.build(target);\r\n                if (buildStatus != 0) {\r\n                    console.log(buildStatus);\r\n                }\r\n            }\r\n            else {\r\n                worker.repair(target);\r\n            }\r\n        }\r\n        else {\r\n            // console.log(\"2picking up energy is\");\r\n            //  pickupEnergy();\r\n        }\r\n    }\r\n};\r\n///////////////////////////////////////////\r\n// upgrader\r\n///////////////////////////////////////////\r\nconst runUpgraders = () => {\r\n    const upgraders = Object.values(Game.creeps).filter((creep) => creep.my && creep.name.startsWith('upgrader'));\r\n    for (const upgrader of upgraders) {\r\n        const controller = upgrader.room.controller;\r\n        if (!controller) {\r\n            // TODO\r\n            // this.logger.warn('upgrader in room with no controller', upgrader);\r\n            upgrader.suicide();\r\n            continue;\r\n        }\r\n        if (upgrader.ticksToLive < 10 && upgrader.store.getUsedCapacity(RESOURCE_ENERGY) == 0) {\r\n            upgrader.suicide();\r\n            continue;\r\n        }\r\n        if (upgrader.ticksToLive < 90 && upgrader.name.startsWith(\"upgrader\") == true && upgrader.memory.spawnNewUpgraderTrigger == undefined) {\r\n            let firstSpawn = upgrader.room.getFirstSpawn();\r\n            upgrader.memory.spawnNewUpgraderTrigger = \"triggered\";\r\n            firstSpawn.memory.spawnUpgrader = true;\r\n        }\r\n        if ((upgrader.store.getUsedCapacity() &&\r\n            upgrader.pos.inRangeTo(controller, 3)) ||\r\n            !upgrader.store.getFreeCapacity()) {\r\n            upgrader.moveTo(controller, { range: 3 });\r\n            upgrader.upgradeController(controller);\r\n        }\r\n        else {\r\n            let nearestContainer = upgrader.pos.findClosestByRange(FIND_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store.getUsedCapacity(RESOURCE_ENERGY) >= 100 });\r\n            let controllerLink = upgrader.room.getControllerLink(undefined);\r\n            nearestContainer = null;\r\n            const energyDrops = upgrader.room.find(FIND_DROPPED_RESOURCES, {\r\n                filter: ({ resourceType }) => resourceType === RESOURCE_ENERGY,\r\n            });\r\n            const droppedEnergy = _.max(energyDrops, 'amount');\r\n            if (controllerLink != undefined) {\r\n                upgrader.moveTo(controllerLink);\r\n                if (upgrader.pos.isNearTo(droppedEnergy)) {\r\n                    upgrader.pickup(droppedEnergy);\r\n                }\r\n                else {\r\n                    if (upgrader.pos.isNearTo(controllerLink))\r\n                        upgrader.withdraw(controllerLink, RESOURCE_ENERGY);\r\n                }\r\n            }\r\n            else if (nearestContainer != undefined) {\r\n                upgrader.moveTo(nearestContainer);\r\n                if (upgrader.pos.isNearTo(droppedEnergy)) {\r\n                    upgrader.pickup(droppedEnergy);\r\n                }\r\n                else if (upgrader.pos.isNearTo(nearestContainer)) {\r\n                    upgrader.withdraw(nearestContainer, RESOURCE_ENERGY);\r\n                }\r\n                else {\r\n                    // do nothing\r\n                    continue;\r\n                }\r\n            }\r\n            // else no container has energy, got to dropped resource.\r\n            else {\r\n                upgrader.moveTo(droppedEnergy);\r\n                upgrader.pickup(droppedEnergy);\r\n            }\r\n        }\r\n    }\r\n};\r\n///////////////////////////////////////////\r\n// Hauler\r\n///////////////////////////////////////////\r\nconst runHaulers = () => {\r\n    const haulers = Object.values(Game.creeps).filter((creep) => creep.my && creep.name.startsWith('hauler-'));\r\n    const getTarget = (workerCreep) => {\r\n        let spawn = workerCreep.pos.findClosestByPath(FIND_MY_SPAWNS, { filter: (s) => s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (spawn != undefined) {\r\n            return spawn;\r\n        }\r\n        let extention = workerCreep.pos.findClosestByPath(FIND_MY_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_EXTENSION && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (extention != undefined) {\r\n            return extention;\r\n        }\r\n        let tower = workerCreep.pos.findClosestByPath(FIND_MY_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_TOWER && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (tower != undefined) {\r\n            return tower;\r\n        }\r\n        // let container = workerCreep.pos.findClosestByPath(FIND_STRUCTURES, {filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store.getFreeCapacity(RESOURCE_ENERGY) >0})\r\n        // if (container !=  undefined) {\r\n        //   return container;\r\n        // }\r\n        return undefined;\r\n    };\r\n    for (const hauler of haulers) {\r\n        if (hauler.store.getFreeCapacity() < hauler.store.getCapacity(RESOURCE_ENERGY)) {\r\n            let target = hauler.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                filter: (structure) => (structure.structureType === STRUCTURE_TOWER\r\n                    && structure.store.getFreeCapacity(RESOURCE_ENERGY) >= 300)\r\n            });\r\n            if (!target) {\r\n                target = hauler.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                    filter: (structure) => (\r\n                    //structure.structureType === STRUCTURE_CONTAINER\r\n                    //structure.structureType === STRUCTURE_SPAWN\r\n                    structure.structureType === STRUCTURE_EXTENSION\r\n                    // ||(structure.structureType === STRUCTURE_TOWER\r\n                    //     && structure.store.getFreeCapacity(RESOURCE_ENERGY) >= 150)\r\n                    )\r\n                        && structure.id != \"62f2e2d8ddeca86442b57bf7\"\r\n                        && structure.id != \"62f2e4a57349b1bc0ab9956a\"\r\n                        && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0\r\n                });\r\n            }\r\n            if (!target) {\r\n                target = hauler.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                    filter: (structure) => (structure.structureType === STRUCTURE_SPAWN\r\n                        && structure.store.getFreeCapacity(RESOURCE_ENERGY) >= 0)\r\n                });\r\n            }\r\n            // if (!target) {\r\n            //   // damagedStucture = tower.pos.findClosestByRange (FIND_STRUCTURES, { filter: s => s.hits < 100000\r\n            //   //   && (s.structureType == STRUCTURE_WALL)});\r\n            //   target = hauler.pos.findClosestByRange(FIND_MY_STRUCTURES, { filter: s =>  s.structureType === STRUCTURE_TOWER});\r\n            //   //   (structure): structure is StructureSpawn\r\n            //   //   | StructureContainer =>\r\n            //   //     (\r\n            //   //       structure.structureType === STRUCTURE_TOWER\r\n            //   //           && structure.store.getFreeCapacity(RESOURCE_ENERGY) >= 0\r\n            //   //       )\r\n            //   // });\r\n            // }\r\n            if (!target) {\r\n                continue;\r\n            }\r\n            hauler.moveTo(target);\r\n            hauler.transfer(target, RESOURCE_ENERGY);\r\n            continue;\r\n        }\r\n        else {\r\n            //hauler.pos.findClosestByRange(FIND_DROPPED_RESOURCES)\r\n            const droppedResources = hauler.pos.findInRange(FIND_DROPPED_RESOURCES, 10, {\r\n                filter: ({ resourceType, amount }) => resourceType === RESOURCE_ENERGY && amount >= hauler.store.getCapacity(RESOURCE_ENERGY),\r\n            });\r\n            let resource = undefined;\r\n            if (droppedResources.length > 0) {\r\n                resource = droppedResources[0];\r\n            }\r\n            // const resource = _.max(energyDrops, 'amount');\r\n            if (resource) {\r\n                hauler.moveTo(resource);\r\n                hauler.pickup(resource);\r\n            }\r\n            else {\r\n                let refuelTarget;\r\n                //  let container1 = Game.getObjectById(\"62fc7dd889db98c32fcadc27\" as any)as StructureContainer;\r\n                // let container2 = Game.getObjectById(\"62f6c9888ed83f1b02aadf32\" as any)as StructureContainer;\r\n                // if (container1.store.getUsedCapacity(RESOURCE_ENERGY) > 0) {\r\n                //   hauler.moveTo(container1)\r\n                //   hauler.withdraw(container1,RESOURCE_ENERGY);\r\n                //   continue\r\n                // }\r\n                // if(container2.store.getUsedCapacity(RESOURCE_ENERGY)){\r\n                //   hauler.moveTo(container2)\r\n                //   hauler.withdraw(container2,RESOURCE_ENERGY);\r\n                //   continue\r\n                // }\r\n                if (hauler.room.storage) {\r\n                    refuelTarget = hauler.room.storage;\r\n                }\r\n                else {\r\n                    refuelTarget = hauler.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                        filter: (s) => s.structureType === STRUCTURE_CONTAINER && s.store.getCapacity(RESOURCE_ENERGY) >= hauler.store.getCapacity(RESOURCE_ENERGY) && s.id != \"62f30980da4be748b0fcf7ce\",\r\n                    });\r\n                }\r\n                const energyDrops = hauler.room.find(FIND_DROPPED_RESOURCES, {\r\n                    filter: ({ resourceType }) => resourceType === RESOURCE_ENERGY,\r\n                });\r\n                const droppedEnergy = _.max(energyDrops, 'amount');\r\n                if (hauler.pos.isNearTo(droppedEnergy)) {\r\n                    hauler.pickup(droppedEnergy);\r\n                }\r\n                if (refuelTarget != undefined) {\r\n                    if (refuelTarget.store.getUsedCapacity(RESOURCE_ENERGY) < 200) {\r\n                        let container = Game.getObjectById(\"62f2e4a57349b1bc0ab9956a\"); // as Structure<StructureContainer>\r\n                        if (container != undefined) {\r\n                            if (container.store.getUsedCapacity(RESOURCE_ENERGY) > 300) {\r\n                                refuelTarget = container;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                hauler.moveTo(refuelTarget);\r\n                //   console.log(\"Refuel Target is \" + refuelTarget)\r\n                hauler.withdraw(refuelTarget, RESOURCE_ENERGY);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst runHaulers2 = () => {\r\n    const hauler2s = Object.values(Game.creeps).filter((creep) => creep.my && creep.name.startsWith('hauler2'));\r\n    const getTarget = (workerCreep) => {\r\n        let spawn = workerCreep.pos.findClosestByPath(FIND_MY_SPAWNS, { filter: (s) => s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (spawn != undefined) {\r\n            return spawn;\r\n        }\r\n        let extention = workerCreep.pos.findClosestByPath(FIND_MY_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_EXTENSION && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (extention != undefined) {\r\n            return extention;\r\n        }\r\n        let tower = workerCreep.pos.findClosestByPath(FIND_MY_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_TOWER && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (tower != undefined) {\r\n            return tower;\r\n        }\r\n        let container = workerCreep.pos.findClosestByPath(FIND_STRUCTURES, { filter: (s) => s.structureType == STRUCTURE_CONTAINER && s.store.getFreeCapacity(RESOURCE_ENERGY) > 0 });\r\n        if (container != undefined) {\r\n            return container;\r\n        }\r\n        return undefined;\r\n    };\r\n    for (const hauler2 of hauler2s) {\r\n        if (hauler2.store.getFreeCapacity() < hauler2.store.getCapacity(RESOURCE_ENERGY)) {\r\n            hauler2.say(\"2\");\r\n            const target = hauler2.room.storage;\r\n            // const target = hauler.pos.findClosestByRange(FIND_STRUCTURES, {\r\n            //   filter: (structure): structure is StructureSpawn\r\n            //   | StructureContainer =>\r\n            //     (structure.structureType === STRUCTURE_CONTAINER\r\n            //       ||structure.structureType === STRUCTURE_SPAWN\r\n            //       ||structure.structureType === STRUCTURE_EXTENSION\r\n            //       ||structure.structureType === STRUCTURE_TOWER\r\n            //       )\r\n            //       && structure.id != \"62f2e2d8ddeca86442b57bf7\"\r\n            //       && structure.id != \"62f2e4a57349b1bc0ab9956a\"\r\n            //       && structure.store.getFreeCapacity(RESOURCE_ENERGY) >= 20\r\n            // });\r\n            if (!target) {\r\n                continue;\r\n            }\r\n            hauler2.moveTo(target);\r\n            hauler2.transfer(target, RESOURCE_ENERGY);\r\n            continue;\r\n        }\r\n        else {\r\n            const resourceLocation = Game.flags.Source2_Container_E44S3;\r\n            // hauler.pos.findClosestByRange(FIND_DROPPED_RESOURCES)\r\n            const droppedResources = resourceLocation.pos.findInRange(FIND_DROPPED_RESOURCES, 5, {\r\n                filter: ({ resourceType, amount }) => resourceType === RESOURCE_ENERGY && amount >= hauler2.store.getCapacity(RESOURCE_ENERGY),\r\n            });\r\n            let resource = undefined;\r\n            if (droppedResources.length > 0) {\r\n                resource = droppedResources[0];\r\n            }\r\n            if (resource) {\r\n                hauler2.moveTo(resource);\r\n                hauler2.pickup(resource);\r\n            }\r\n            if (hauler2.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\r\n                let refuelTarget;\r\n                refuelTarget = resourceLocation.pos.findClosestByRange(FIND_STRUCTURES, {\r\n                    filter: (s) => s.structureType === STRUCTURE_CONTAINER && s.store.getCapacity(RESOURCE_ENERGY) >= hauler2.store.getCapacity(RESOURCE_ENERGY) && s.id != \"62f30980da4be748b0fcf7ce\",\r\n                });\r\n                const energyDrops = hauler2.room.find(FIND_DROPPED_RESOURCES, {\r\n                    filter: ({ resourceType }) => resourceType === RESOURCE_ENERGY,\r\n                });\r\n                const droppedEnergy = _.max(energyDrops, 'amount');\r\n                if (hauler2.pos.isNearTo(droppedEnergy)) {\r\n                    hauler2.pickup(droppedEnergy);\r\n                }\r\n                if (refuelTarget != undefined) {\r\n                    if (refuelTarget.store.getUsedCapacity(RESOURCE_ENERGY) < 200) {\r\n                        let container = Game.getObjectById(\"62f2e4a57349b1bc0ab9956a\"); // as Structure<StructureContainer>\r\n                        if (container != undefined) {\r\n                            if (container.store.getUsedCapacity(RESOURCE_ENERGY) > 300) {\r\n                                refuelTarget = container;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                hauler2.moveTo(refuelTarget);\r\n                // console.log(\"Refuel Target is \" + refuelTarget)\r\n                hauler2.withdraw(refuelTarget, RESOURCE_ENERGY);\r\n            }\r\n        }\r\n    }\r\n};\r\nexport const creepManager = createProcess(restartOnTickChange(function* () {\r\n    for (;;) {\r\n        runAttackers();\r\n        yield;\r\n        runMiners();\r\n        yield;\r\n        runHaulers2();\r\n        yield;\r\n        runHaulers();\r\n        yield;\r\n        runUpgraders();\r\n        yield;\r\n        runWorkers();\r\n        yield* sleep();\r\n    }\r\n}));\r\n//# sourceMappingURL=creep-manager.js.map","references":["C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/os/src/index.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/bot/src/utils/index.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/bot/src/library/index.ts","C:/Users/Neal/AppData/Local/Yarn/Berry/cache/@types-lodash-npm-3.10.2-77e50b98cf-9.zip/node_modules/@types/lodash/index.d.ts"],"map":"{\"version\":3,\"file\":\"creep-manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/processes/creep-manager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
