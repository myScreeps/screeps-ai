{"code":"import { OSExit, } from './system';\r\nimport { isDefined } from './utils';\r\nconst ArgsMemoryKey = '__args';\r\nconst packEntry = (entry) => [\r\n    entry.type,\r\n    entry.pid,\r\n    entry.memory,\r\n    entry.parent,\r\n    entry.priority,\r\n];\r\nconst unpackEntry = (entry) => ({\r\n    type: entry[0],\r\n    pid: entry[1],\r\n    memory: entry[2],\r\n    parent: entry[3],\r\n    priority: entry[4],\r\n});\r\nconst entryToInfo = (entry) => ({\r\n    pid: entry.pid,\r\n    parent: entry.parent,\r\n    priority: entry.priority,\r\n    type: entry.type,\r\n    args: entry.memory[ArgsMemoryKey],\r\n});\r\nexport class Kernel {\r\n    constructor(config) {\r\n        var _a, _b;\r\n        this.threads = new Map();\r\n        this.sleepingThreads = new Map();\r\n        const { registry, scheduler, getDataHandle, logger, clock, quota } = config;\r\n        this.registry = registry;\r\n        this.logger = logger;\r\n        this.scheduler = scheduler;\r\n        this.clock = clock;\r\n        this.quota = quota;\r\n        this.tableRef = getDataHandle('table', {});\r\n        const root = this.table[0];\r\n        if (!root || unpackEntry(root).type !== 'init') {\r\n            (_b = (_a = this.logger) === null || _a === void 0 ? void 0 : _a.onKernelError) === null || _b === void 0 ? void 0 : _b.call(_a, 'Root process, init, is missing or corrupt');\r\n            this.reboot();\r\n        }\r\n        else {\r\n            for (const pid of this.pids) {\r\n                this.initThread(pid);\r\n            }\r\n        }\r\n        this.PIDCount = Math.max(0, ...this.pids);\r\n    }\r\n    get table() {\r\n        return this.tableRef.get();\r\n    }\r\n    set table(value) {\r\n        this.tableRef.set(value);\r\n    }\r\n    getProcessDescriptor(pid) {\r\n        const descriptor = this.table[pid];\r\n        if (!descriptor) {\r\n            throw new Error(`Attempted to access non-existent process ${pid}`);\r\n        }\r\n        return unpackEntry(descriptor);\r\n    }\r\n    get pids() {\r\n        return Object.keys(this.table).map((k) => Number.parseInt(k));\r\n    }\r\n    reboot() {\r\n        for (const pid of this.pids) {\r\n            this.scheduler.remove(pid);\r\n        }\r\n        this.table = {};\r\n        this.threads.clear();\r\n        this.createProcess('init', [], 0, 0);\r\n    }\r\n    acquirePID() {\r\n        if (this.PIDCount >= 50000) {\r\n            this.PIDCount = 0;\r\n        }\r\n        ++this.PIDCount;\r\n        if (this.table[this.PIDCount]) {\r\n            return this.acquirePID();\r\n        }\r\n        return this.PIDCount;\r\n    }\r\n    createProcess(type, args, parent, pid = this.acquirePID(), priority) {\r\n        // istanbul ignore next\r\n        if (pid in this.table) {\r\n            throw new Error(`PID already occupied`);\r\n        }\r\n        const descriptor = {\r\n            type,\r\n            pid,\r\n            parent,\r\n            memory: {\r\n                [ArgsMemoryKey]: args,\r\n            },\r\n            priority: priority !== null && priority !== void 0 ? priority : null,\r\n        };\r\n        this.table[pid] = packEntry(descriptor);\r\n        this.initThread(pid);\r\n        return descriptor;\r\n    }\r\n    initThread(pid) {\r\n        var _a, _b;\r\n        const { type, memory, priority } = this.getProcessDescriptor(pid);\r\n        const process = this.registry[type];\r\n        if (!process) {\r\n            this.kill(pid);\r\n            (_b = (_a = this.logger) === null || _a === void 0 ? void 0 : _a.onKernelError) === null || _b === void 0 ? void 0 : _b.call(_a, `Error trying to initialise pid ${pid} with unknown type ${type}`);\r\n            return;\r\n        }\r\n        const args = memory[ArgsMemoryKey];\r\n        this.threads.set(pid, process(...args));\r\n        this.scheduler.add(pid, priority);\r\n    }\r\n    findChildren(pid) {\r\n        return Object.values(this.table)\r\n            .map((v) => unpackEntry(v))\r\n            .filter(({ parent }) => parent === pid);\r\n    }\r\n    kill(pid) {\r\n        if (pid === 0 || !(pid in this.table || this.threads.has(pid))) {\r\n            return false;\r\n        }\r\n        // Orphans are killed\r\n        this.findChildren(pid).forEach((child) => {\r\n            this.kill(child.pid);\r\n        });\r\n        this.threads.delete(pid);\r\n        delete this.table[pid];\r\n        this.scheduler.remove(pid);\r\n        return true;\r\n    }\r\n    runThread(pid) {\r\n        var _a, _b;\r\n        const thread = this.threads.get(pid);\r\n        if (!thread) {\r\n            (_b = (_a = this.logger) === null || _a === void 0 ? void 0 : _a.onKernelError) === null || _b === void 0 ? void 0 : _b.call(_a, `Attempting to run ${pid} with missing thread.`);\r\n            this.kill(pid);\r\n            return false;\r\n        }\r\n        if (this.sleepingThreads.has(pid)) {\r\n            return false;\r\n        }\r\n        let nextArg = undefined;\r\n        for (;;) {\r\n            const sysCall = thread.next(nextArg);\r\n            nextArg = undefined;\r\n            if (sysCall.done) {\r\n                this.kill(pid);\r\n                return false;\r\n            }\r\n            if (!sysCall.value) {\r\n                return true;\r\n            }\r\n            switch (sysCall.value.type) {\r\n                case 'sleep': {\r\n                    this.sleepingThreads.set(pid, this.clock() + sysCall.value.ticks);\r\n                    return false;\r\n                }\r\n                case 'fork': {\r\n                    const { args, processType, priority } = sysCall.value;\r\n                    const child = this.createProcess(processType, args, pid, undefined, priority);\r\n                    nextArg = { type: 'fork', pid: child.pid };\r\n                    break;\r\n                }\r\n                case 'kill': {\r\n                    const { pid: childPID } = sysCall.value;\r\n                    if (!this.findChildren(pid).some((child) => child.pid === childPID)) {\r\n                        break;\r\n                    }\r\n                    this.kill(childPID);\r\n                    break;\r\n                }\r\n                case 'allocate': {\r\n                    const descriptor = this.getProcessDescriptor(pid);\r\n                    nextArg = { type: 'allocate', pointer: descriptor.memory };\r\n                    break;\r\n                }\r\n                case 'children': {\r\n                    const children = this.findChildren(pid).reduce((acc, entry) => ({\r\n                        ...acc,\r\n                        [entry.pid]: entryToInfo(entry),\r\n                    }), {});\r\n                    nextArg = { type: 'children', children };\r\n                    break;\r\n                }\r\n                case 'request_priority': {\r\n                    const priority = isDefined(sysCall.value.priority)\r\n                        ? this.scheduler.clampPriority(sysCall.value.priority)\r\n                        : undefined;\r\n                    this.table[pid] = packEntry({\r\n                        ...this.getProcessDescriptor(pid),\r\n                        priority: priority !== null && priority !== void 0 ? priority : null,\r\n                    });\r\n                    this.scheduler.add(pid, priority !== null && priority !== void 0 ? priority : null);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    run() {\r\n        var _a, _b, _c, _d;\r\n        const tick = this.clock();\r\n        for (const [pid, wakeTime] of this.sleepingThreads) {\r\n            if (tick >= wakeTime) {\r\n                this.sleepingThreads.delete(pid);\r\n            }\r\n        }\r\n        const schedule = this.scheduler.run(this.quota);\r\n        let nextArg = true;\r\n        for (;;) {\r\n            const next = schedule.next(nextArg);\r\n            if (next.done) {\r\n                break;\r\n            }\r\n            const pid = next.value;\r\n            const entry = this.getProcessDescriptor(pid);\r\n            // const startCPU = Game.cpu.getUsed();\r\n            try {\r\n                nextArg = this.runThread(pid);\r\n            }\r\n            catch (err) {\r\n                this.kill(pid);\r\n                if (err instanceof OSExit) {\r\n                    (_b = (_a = this.logger) === null || _a === void 0 ? void 0 : _a.onThreadExit) === null || _b === void 0 ? void 0 : _b.call(_a, entryToInfo(entry), err.message);\r\n                }\r\n                else {\r\n                    (_d = (_c = this.logger) === null || _c === void 0 ? void 0 : _c.onThreadError) === null || _d === void 0 ? void 0 : _d.call(_c, entryToInfo(entry), err);\r\n                }\r\n                if (pid === 0) {\r\n                    this.reboot();\r\n                    return;\r\n                }\r\n                continue;\r\n            }\r\n            // const endCpu = Game.cpu.getUsed();\r\n            // TODO\r\n            // recordStats({\r\n            //   threads: {\r\n            //     [entry.type]: {\r\n            //       [pid]: endCpu - startCPU,\r\n            //     },\r\n            //   },\r\n            // });\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    ps() {\r\n        return Object.values(this.table).map((entry) => entryToInfo(unpackEntry(entry)));\r\n    }\r\n}\r\n//# sourceMappingURL=Kernel.js.map","references":["C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/os/src/Scheduler.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/os/src/system.ts","C:/Users/Neal/AppData/Local/Screeps/scripts/Grunt/screepsOS5/screeps-ai/packages/os/src/utils.ts"],"map":"{\"version\":3,\"file\":\"Kernel.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../os/src/Kernel.ts\"],\"names\":[],\"mappings\":\"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\"}"}
